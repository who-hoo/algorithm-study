public class Solution {

    public static void main(String[] args) {
        int[][] dungeons = {{80, 20}, {50, 40}, {30, 10}};
        int k = 80;
        Solution s = new Solution();
        s.solution(k, dungeons);
    }

    private int solution(int k, int[][] dungeons) {
        /**
         * 던전마다 필요한 최소 필요 피로도
         * 마쳤을 때 소모되는 소모 피로도
         * 1 <= k(피로도) <= 5000
         * 1 <= 던전의 가로 <= 8
         * 던전의 세로 == 2
         * ["최소 필요 피로도", "소모 피로도"]
         * 최소 필요 피로도 >= 소모 피로도
         * 1 <= 최소 필요 피로도, 소모 피로도 <= 1000
         *
         * result = 최대 던전 수를 구하라!
         * 예제는 1, 2, 3으로 하면 result = 2이지만,
         * 1, 3, 2 순서로 돌면 result = 3
         *
         * 남은 피로도를 확인해서 남은 피로도보다
         * 최소 피로도가 큰 것부터 돌게끔하고
         * 소모 피로도도
         *
         * 아 모르겠군.. 던전을 정렬해야하나? 뭘 기준으로? 최소 피로도를 기준으로 오름차순 정렬을 해? 말아
         * 1, 3, 2로 돌았을 때
         * 현재 피로도를 확인, 현재 피로도에서 가장 효율적이게 80, 20으로 가서 80이 필요하고 20을 소모하는 던전 하나를 방문.
         * 그 다음 60이 남은 피로도를 가지고 50이 아닌 ..? 오?
         * 60, 10, 20 각 던전의 효율성이라고 치면
         * 60 20 10 정렬을 한다?! 이렇게 한번 도전
         * ;;
         * dfs????????? 왜 dfs일꽈 그냥 냅다 완전 탐색해서 결과를 찾는것인가
         */



        return 0;

    }

}
